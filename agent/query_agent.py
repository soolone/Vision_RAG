import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import asyncio
import json
from typing import List, Optional

from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage, SystemMessage

from utils.apis import Qwen3_235B_A22B

class QueryExpansionAgent:
    """Âü∫‰∫éQwen3-235B-A22BÁöÑÊü•ËØ¢Êâ©ÂÜôÊô∫ËÉΩ‰ª£ÁêÜ"""
    
    def __init__(self):
        # ÂàùÂßãÂåñQwenÊ®°Âûã
        qwen_config = Qwen3_235B_A22B()
        self.llm = ChatOpenAI(
            openai_api_base=qwen_config.api_base,
            openai_api_key=qwen_config.api_key,
            model_name=qwen_config.model,
            temperature=0.6,  # Á®çÂæÆÊèêÈ´òÂàõÈÄ†ÊÄß‰ª•ÁîüÊàêÂ§öÊ†∑ÂåñÁöÑÊü•ËØ¢
            max_tokens=1000,
            streaming=False,
            extra_body={
                "enable_thinking": False,  # Á¶ÅÁî®ÊÄùËÄÉÊ®°Âºè
            }
        )
        
        # Á≥ªÁªüÊèêÁ§∫
        self.system_prompt = """
You are an expert query expansion specialist for multimodal RAG systems. Your task is to rewrite and expand user queries to improve retrieval accuracy in vision-based document search.

Given a user query, you must:
1. Generate 3-5 diverse English query variations that capture different aspects of the original intent
2. Each query should be semantically related but use different vocabulary and phrasing
3. Include synonyms, related concepts, and alternative expressions
4. Consider both technical and layman terms when applicable
5. Ensure queries are optimized for visual document retrieval (charts, diagrams, text in images)

IMPORTANT REQUIREMENTS:
- Output MUST be in English regardless of input language
- Return ONLY a JSON array of strings, no additional text
- Each query should be 5-20 words long
- Avoid redundant or overly similar queries
- Focus on actionable, specific queries that would match visual content

Example input: "ÁªôÊàëËÆ≤Ëß£‰∏ãtransformerÊ®°ÂûãÁöÑÁªìÊûÑ"
Example output: ["explain transformer model architecture structure", "transformer neural network components diagram", "attention mechanism in transformer models", "encoder decoder transformer design", "transformer block structure visualization"]

Now process the user query:
"""
        
        # Ëá™Âä®Êâ©ÂÜôÁ≥ªÁªüÊèêÁ§∫
        self.auto_expand_prompt = """
You are an expert query expansion specialist. Your CRITICAL task is to expand short user queries to make them more detailed and comprehensive while preserving the original intent.

üö® ABSOLUTE REQUIREMENT: The expanded query MUST be at least the specified minimum character count. This is NON-NEGOTIABLE.

Given a short user query and a target minimum length, you must:
1. Expand the query to reach AT LEAST the specified target length while maintaining the original meaning
2. Add relevant context, synonyms, and related concepts
3. Keep the expanded query natural and coherent
4. Preserve the original language of the input
5. Focus on the core intent of the original query
6. ENSURE the expanded query meets or exceeds the minimum character count requirement
7. If the expansion is still too short, add more descriptive details, examples, or context until the target length is reached

CRITICAL REQUIREMENTS:
- Maintain the same language as the input query
- The expanded query MUST be at least the specified minimum length in characters - THIS IS MANDATORY
- The expanded query should be natural and readable
- Do not change the fundamental meaning or intent
- Add helpful context and details that would improve search results
- Return ONLY the expanded query text, no additional formatting
- Keep expanding with relevant details until you reach the minimum character count
- Count characters carefully and ensure you meet the requirement

Example input: "transformerÁªìÊûÑ" (target: 50+ characters)
Example output: "ËØ∑ËØ¶ÁªÜËß£ÈáätransformerÊ®°ÂûãÁöÑÊï¥‰ΩìÊû∂ÊûÑÁªìÊûÑÔºåÂåÖÊã¨ÁºñÁ†ÅÂô®ÂíåËß£Á†ÅÂô®ÁöÑÁªÑÊàêÈÉ®ÂàÜÔºåÊ≥®ÊÑèÂäõÊú∫Âà∂ÁöÑÂ∑•‰ΩúÂéüÁêÜÔºå‰ª•ÂèäÂêÑ‰∏™Ê®°Âùó‰πãÈó¥ÁöÑËøûÊé•ÂÖ≥Á≥ªÂíåÊï∞ÊçÆÊµÅÂêëÔºåÂπ∂ËØ¥ÊòéÊØè‰∏™ÁªÑ‰ª∂ÁöÑÂÖ∑‰ΩìÂäüËÉΩÂíå‰ΩúÁî®Êú∫Âà∂"

IMPORTANT: Before responding, mentally count the characters in your expansion to ensure it meets the minimum requirement.

Now expand the following query to meet the minimum length requirement:
"""
    
    async def expand_query(self, original_query: str) -> List[str]:
        """Êâ©ÂÜôÊü•ËØ¢ÔºåÁîüÊàêÂ§ö‰∏™Ëã±ÊñáÊü•ËØ¢Âèò‰Ωì
        
        Args:
            original_query: ÂéüÂßãÁî®Êà∑Êü•ËØ¢
            
        Returns:
            Êâ©ÂÜôÂêéÁöÑÊü•ËØ¢ÂàóË°®
        """
        try:
            # ÊûÑÂª∫Ê∂àÊÅØ
            messages = [
                SystemMessage(content=self.system_prompt),
                HumanMessage(content=original_query)
            ]
            
            # Ë∞ÉÁî®LLM
            response = await self.llm.ainvoke(messages)
            llm_response = response.content.strip()
            
            # Ëß£ÊûêJSONÂìçÂ∫î
            try:
                # ÁßªÈô§ÂèØËÉΩÁöÑmarkdown‰ª£Á†ÅÂùóÊ†áËÆ∞
                if llm_response.startswith('```json'):
                    llm_response = llm_response[7:]
                if llm_response.endswith('```'):
                    llm_response = llm_response[:-3]
                
                expanded_queries = json.loads(llm_response)
                
                # È™åËØÅËøîÂõûÊ†ºÂºè
                if isinstance(expanded_queries, list) and all(isinstance(q, str) for q in expanded_queries):
                    # ËøáÊª§Á©∫Êü•ËØ¢Âπ∂ÈôêÂà∂Êï∞Èáè
                    valid_queries = [q.strip() for q in expanded_queries if q.strip()]
                    return valid_queries[:5]  # ÊúÄÂ§öËøîÂõû5‰∏™Êü•ËØ¢
                else:
                    print(f"Invalid response format: {llm_response}")
                    return [original_query]  # ËøîÂõûÂéüÊü•ËØ¢‰Ωú‰∏∫fallback
                    
            except json.JSONDecodeError as e:
                print(f"JSON parsing error: {e}")
                print(f"Raw response: {llm_response}")
                return [original_query]  # ËøîÂõûÂéüÊü•ËØ¢‰Ωú‰∏∫fallback
                
        except Exception as e:
            print(f"Query expansion error: {e}")
            return [original_query]  # ËøîÂõûÂéüÊü•ËØ¢‰Ωú‰∏∫fallback
    
    async def auto_expand_query(self, original_query: str, min_length: int = 50) -> str:
        """Ëá™Âä®Êâ©ÂÜôÊü•ËØ¢ÔºåÂΩìÊü•ËØ¢ÈïøÂ∫¶Â∞ë‰∫éÊåáÂÆöÂ≠óÊï∞Êó∂ËøõË°åÊâ©ÂÜô
        
        Args:
            original_query: ÂéüÂßãÁî®Êà∑Êü•ËØ¢
            min_length: ÊúÄÂ∞èÂ≠óÊï∞Ë¶ÅÊ±ÇÔºåÈªòËÆ§50Â≠ó
            
        Returns:
            Êâ©ÂÜôÂêéÁöÑÊü•ËØ¢ÔºàÂ¶ÇÊûúÈúÄË¶ÅÊâ©ÂÜôÔºâÊàñÂéüÂßãÊü•ËØ¢
        """
        # Ê£ÄÊü•Êü•ËØ¢ÈïøÂ∫¶ÊòØÂê¶ÈúÄË¶ÅÊâ©ÂÜô
        if len(original_query) >= min_length:
            print(f"Query already meets minimum length: {len(original_query)} >= {min_length}")
            return original_query
        
        print(f"Query needs expansion: {len(original_query)} < {min_length}")
        
        # ÊúÄÂ§öÂ∞ùËØï3Ê¨°Êâ©ÂÜô
        for attempt in range(3):
            try:
                # ÊûÑÂª∫Ê∂àÊÅØÔºåÊØèÊ¨°Â∞ùËØïÈÉΩÂº∫Ë∞ÉË¶ÅÊ±Ç
                emphasis = "üö® CRITICAL: " if attempt > 0 else ""
                retry_note = f" (Attempt {attempt + 1}/3 - Previous attempts were too short!)" if attempt > 0 else ""
                
                messages = [
                    SystemMessage(content=self.auto_expand_prompt),
                    HumanMessage(content=f"{emphasis}ABSOLUTE REQUIREMENT: The expanded query MUST be at least {min_length} characters long{retry_note}.\n\nTarget minimum length: {min_length} characters\nCurrent query length: {len(original_query)} characters\nOriginal query: {original_query}\n\nYou MUST expand this query to reach AT LEAST {min_length} characters while preserving the original meaning and language. Count the characters in your response to ensure it meets the requirement.")
                ]
                
                # Ë∞ÉÁî®LLM
                response = await self.llm.ainvoke(messages)
                expanded_query = response.content.strip()
                
                # È™åËØÅÊâ©ÂÜôÁªìÊûú
                actual_length = len(expanded_query.strip())
                print(f"Attempt {attempt + 1}: Generated {actual_length} characters (target: {min_length}+)")
                
                if expanded_query and actual_length >= min_length:
                    print(f"‚úÖ Auto expansion successful: {actual_length} characters")
                    print(f"Expanded query: {expanded_query[:100]}{'...' if len(expanded_query) > 100 else ''}")
                    return expanded_query.strip()
                else:
                    print(f"‚ùå Attempt {attempt + 1} failed: {actual_length} < {min_length}")
                    print(f"Result: {expanded_query[:100]}{'...' if len(expanded_query) > 100 else ''}")
                    
            except Exception as e:
                print(f"Auto expansion error on attempt {attempt + 1}: {e}")
        
        print(f"‚ö†Ô∏è All expansion attempts failed, returning original query")
        return original_query
    
    def auto_expand_query_sync(self, original_query: str, min_length: int = 50) -> str:
        """ÂêåÊ≠•ÁâàÊú¨ÁöÑËá™Âä®Êâ©ÂÜôÊü•ËØ¢
        
        Args:
            original_query: ÂéüÂßãÁî®Êà∑Êü•ËØ¢
            min_length: ÊúÄÂ∞èÂ≠óÊï∞Ë¶ÅÊ±ÇÔºåÈªòËÆ§50Â≠ó
            
        Returns:
            Êâ©ÂÜôÂêéÁöÑÊü•ËØ¢ÔºàÂ¶ÇÊûúÈúÄË¶ÅÊâ©ÂÜôÔºâÊàñÂéüÂßãÊü•ËØ¢
        """
        return asyncio.run(self.auto_expand_query(original_query, min_length))
    
    def expand_query_sync(self, original_query: str) -> List[str]:
        """ÂêåÊ≠•ÁâàÊú¨ÁöÑÊü•ËØ¢Êâ©ÂÜô
        
        Args:
            original_query: ÂéüÂßãÁî®Êà∑Êü•ËØ¢
            
        Returns:
            Êâ©ÂÜôÂêéÁöÑÊü•ËØ¢ÂàóË°®
        """
        return asyncio.run(self.expand_query(original_query))

# ‰æøÊç∑ÂáΩÊï∞
def create_query_agent() -> QueryExpansionAgent:
    """ÂàõÂª∫Êü•ËØ¢Êâ©ÂÜô‰ª£ÁêÜ"""
    return QueryExpansionAgent()

def expand_query_quick(query: str) -> List[str]:
    """Âø´ÈÄüÊü•ËØ¢Êâ©ÂÜôÂáΩÊï∞"""
    agent = create_query_agent()
    return agent.expand_query_sync(query)

# ÊµãËØïÂáΩÊï∞
async def test_query_expansion():
    """ÊµãËØïÊü•ËØ¢Êâ©ÂÜô‰ª£ÁêÜ"""
    agent = create_query_agent()
    
    test_queries = [
        "ÁªôÊàëËÆ≤Ëß£‰∏ãtransformerÊ®°ÂûãÁöÑÁªìÊûÑ",
        "‰ªÄ‰πàÊòØÊ≥®ÊÑèÂäõÊú∫Âà∂",
        "Ê∑±Â∫¶Â≠¶‰π†ÁöÑ‰ºòÂåñÁÆóÊ≥ïÊúâÂì™‰∫õ",
        "CNNÂíåRNNÁöÑÂå∫Âà´",
        "Ëß£Èáä‰∏Ä‰∏ãRAGÁ≥ªÁªüÁöÑÂ∑•‰ΩúÂéüÁêÜ"
    ]
    
    for query in test_queries:
        print(f"\nÂéüÂßãÊü•ËØ¢: {query}")
        print("-" * 50)
        expanded = await agent.expand_query(query)
        for i, exp_query in enumerate(expanded, 1):
            print(f"{i}. {exp_query}")

if __name__ == "__main__":
    asyncio.run(test_query_expansion())